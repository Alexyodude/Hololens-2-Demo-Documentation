{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wecome to Hololens 2 Demo Documention","text":"<p>The documentation contains information to replicate the project. It has the hierarchy and thought process of what the components attached to the objects are meant to do.</p> <p>The site can be shared easily with this tinyurl \"https://tinyurl.com/Hololens2Demo\".</p>"},{"location":"Unity/Application%20Description/","title":"Application Description","text":"<p>The user enters the application:</p> <p>(There may be a prompt saying that the user has to calibrate the device)  The user is met with a UI(User interface) that follows the user's head. It contains toggle and press buttons. The toggle buttons are Toggle Drone, Toggle Pistol, Toggle Mesh, and Toggle Enemy. The UI can be pinned in space so it stops following the user around. In addition this UI panel can be resized or moved around in space with hand gestures.</p> <p>There is an [[empty object named scripts]] which contains the scripts to instantiate the GameObjects.</p>"},{"location":"Unity/Component/","title":"Component","text":"<p>A component is something that is attached to the a object. A [[script]] is a type of component.</p>"},{"location":"Unity/Create%20Box/","title":"Create Box","text":"<pre><code>using System.Collections.Generic; // Import the System.Collections.Generic namespace for using the List class\nusing UnityEngine; // Import the UnityEngine namespace to access Unity-specific classes and methods\n\npublic class CreateBox : MonoBehaviour {\n\n    // Public variables allow for easy assignment in the Unity Inspector\n    public Rigidbody box; // Reference to the Rigidbody component that will be instantiated as a box. A prefab object was used.\n    public GameObject location; // Reference to the GameObject representing the location where boxes will be instantiated\n    private List&lt;Rigidbody&gt; list = new List&lt;Rigidbody&gt;(); // Private list to keep track of instantiated Rigidbody boxes\n\n    // Method to instantiate a box and add it to the list\n    public void MakeBox()\n    {\n        // Instantiate a new box at the location's position with the object's rotation\n        Rigidbody newBox = Instantiate(box, location.transform.position, transform.rotation);\n        // Add the new box to the list for tracking\n        list.Add(newBox);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        // Use a temporary list to store items to be removed to avoid modifying the list during iteration\n        List&lt;Rigidbody&gt; itemsToRemove = new List&lt;Rigidbody&gt;();\n\n        // Iterate over the list of boxes\n        foreach (var item in list)\n        {\n            // Check if the box's y position is below -10\n            if (item.transform.position.y &lt; -10)\n            {\n                // Mark the box for removal\n                itemsToRemove.Add(item);\n            }\n        }\n\n        // Remove the marked boxes from the list and destroy their game objects\n        foreach (var item in itemsToRemove)\n        {\n            // Destroy the game object associated with the Rigidbody\n            Destroy(item.gameObject);\n            // Remove the Rigidbody from the list\n            list.Remove(item);\n        }\n    }\n}\n\n}\n</code></pre> <p>The first import is for the List class and the second import is for the classes and methods used in unity such as Rigidbody and MonoBehaviour. MonoBehaviour contains lifecycle methods such as Update() used in this [[script]]. For more detail look into Unity - Scripting API: MonoBehaviour (unity3d.com). </p> <p>Public variables are declared to take in inputs from the unity scene and assets. A private list contains a list of box objects that were instantiated. </p> <p>The method \"public void MakeBox()\" instantiates and adds the object to the private list. In each Update() cycle the list of boxes are checked if it left the boundary that was set. If it does then it calls the Destory() method and removes the object that left the boundary from the list.</p> <p>The [[prefab]] contains a rigidbody and object manipulator component.</p>"},{"location":"Unity/Create%20Grenade/","title":"Create Grenade","text":"<p>Yet developed</p>"},{"location":"Unity/Empty%20Object%20Named%20Scripts/","title":"Empty Object Named Scripts","text":"<p>The [[script]] [[component]]s attached to the [[empty object]] with the name \"Scripts\" are:</p> <ul> <li>Create Box</li> <li>Toggle Mesh</li> <li>Mesh Saver (InProgress)</li> <li>Toggle Enemy</li> <li>Toggle Drone</li> <li>Toggle Pistol</li> <li>Create Grenade (InProgress)</li> </ul> <p>All the [[script]]s are used to control the states of each object.</p>"},{"location":"Unity/Empty%20Object/","title":"Empty Object","text":"<p>An empty object contains no mesh of any sort and is primarily used for organisational purpose such as being a parent of some hierarchy.  </p>"},{"location":"Unity/GameObjects/","title":"Gameobjects","text":"<p>GameObjects are the most basic ways to describe objects in the scene. Every object in the scene is a GameObject so it is the most encompassing category.</p>"},{"location":"Unity/Mesh%20Saver/","title":"Mesh Saver","text":"<p>Yet developed</p>"},{"location":"Unity/Prefab/","title":"Prefab","text":"<p>A prefab is a blueprint object, this means that when editing this object the changes will be applied to every instance of this object being used elsewhere.</p> <p>The use of this capability is an efficient way to make changes across the entire project without having to manually change in the same way object by object.</p>"},{"location":"Unity/Script/","title":"Script","text":"<p>A script is programmed in C# and it can control the state of the game from the game.</p>"},{"location":"Unity/Setting%20Up%20the%20Enviorment/","title":"Setting Up The Enviorment","text":"<p>Download Unity and install the lts (latest) version of the game engine. make sure to select universal UWP(windows platform) and windows when downloading the version.</p> <p>Follow the tutorial below: XR Step-by-Step 2023! Hololens 2: Setting up your Project in Unity 2022 + MRTK 2.8.3 + Visual Studio 2022 \u2013 Lance Larsen \u2013 Microsoft MVP \u2013 Hololens / VR / AR</p> <p>Then connect to the Hololens 2 remotely by going in the unity project then Mixed Reality &gt; Remoting &gt; Holographic Remoting for Play Mode.</p> <p>Inside the Hololens 2 open the App named \"Holographic Remoting\". Type the ip address seen inside the app into the settings inside \"Holographic Remoting for Play Mode\" in the unity project. Leave the port as is and make sure to press \"enable holographic remoting for play mode\". </p> <p>This should setup the Hololens 2 to be play tested. </p> <p>Application Description</p>"},{"location":"Unity/Enemy%20Component%20Scripts/Random%20Movement/","title":"Random Movement","text":"<p>This script is used to move the enemy around in random directions and change direction when it detects a collision with a wall.</p>"},{"location":"Unity/UI/Toggle%20Drone/","title":"Toggle Drone","text":"<p>This turns on and off the drone.</p> <p>In the script managing the toggle feature contains public variables     - Drone Prefab     - Relative Spawn Location     - Number of Drones The Prefab contains additional Script to separate, keep together, and follow a target.</p> <p>This script is contained in an empty object in the scene, more about it in Application Description.</p>"},{"location":"Unity/UI/Toggle%20Enemy/","title":"Toggle Enemy","text":"<p>This turns on and off the enemy.</p> <p>In the script managing the toggle feature contains public variables</p> <pre><code>- Enemy [Prefab](../../Prefab)\n- Organizational Parent Object\n- Respawn Boundary Condition\n- Number of Enemies\n-\n</code></pre> <p>The Prefab contains several Script:</p> <pre><code>- [Animator](../../Enemy Component Scripts/Animator)\n- [Character Controller](../../Enemy Component Scripts/Character Controller)\n- [Enemy Collision Handler](../../Enemy Component Scripts/Enemy Collision Handler)\n- [Random Movement](../../Enemy Component Scripts/Random Movement)\n- [Parent Rigid Controller](../../Enemy Component Scripts/Parent Rigid Controller)\n- [Enemy State](../../Enemy Component Scripts/Enemy State)\n</code></pre> <p>This script is contained in an empty object in the scene, more about it in Application Description.</p>"},{"location":"Unity/UI/Toggle%20Mesh/","title":"Toggle Mesh","text":"<p>This turns on and off the mesh.</p> <p>This script is contained in an empty object in the scene, more about it in Application Description.</p>"},{"location":"Unity/UI/Toggle%20Pistol/","title":"Toggle Pistol","text":"<p>This turns on and off the pistol.</p> <p>This script is contained in an empty object in the scene, more about it in Application Description.</p>"}]}