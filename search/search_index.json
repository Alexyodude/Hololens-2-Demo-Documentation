{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wecome to Hololens 2 Demo Documention","text":"<p>The documentation contains information to replicate the project. It has the hierarchy and thought process of what the components attached to the objects are meant to do.</p> <p>The site can be shared easily with this tinyurl \"https://tinyurl.com/Holo2Demo\".</p>"},{"location":"Unity/Application%20Description/","title":"Application Description","text":"<p>The user enters the application:</p> <p>(There may be a prompt saying that the user has to calibrate the device)  The user is met with a UI(User interface) that follows the user's head. It contains toggle and press buttons. The toggle buttons are Toggle Drone, Toggle Pistol, Toggle Mesh, and Toggle Enemy. The UI can be pinned in space so it stops following the user around. In addition this UI panel can be resized or moved around in space with hand gestures.</p> <p>There is an Empty Object Named Scripts which contains the scripts to instantiate the GameObjects.</p>"},{"location":"Unity/Component/","title":"Component","text":"<p>A component is something that is attached to the a object. A Script is a type of component.</p>"},{"location":"Unity/Empty%20Object%20Named%20Scripts/","title":"Empty Object Named Scripts","text":"<p>The Script Components attached to the Empty Object with the name \"Scripts\" are:</p> <ul> <li>Create Box</li> <li>Toggle Mesh</li> <li>Mesh Saver (InProgress)</li> <li>Toggle Enemy</li> <li>Toggle Drone</li> <li>Toggle Pistol</li> <li>Create Grenade (InProgress)</li> </ul> <p>All the Scripts are used to control the states of each object.</p>"},{"location":"Unity/Empty%20Object/","title":"Empty Object","text":"<p>An empty object contains no mesh of any sort and is primarily used for organisational purpose such as being a parent of some hierarchy.  </p>"},{"location":"Unity/GameObjects/","title":"Gameobjects","text":"<p>GameObjects are the most basic ways to describe objects in the scene. Every object in the scene is a GameObject so it is the most encompassing category.</p>"},{"location":"Unity/Prefab/","title":"Prefab","text":"<p>A prefab is a blueprint object, this means that when editing this object the changes will be applied to every instance of this object being used elsewhere.</p> <p>The use of this capability is an efficient way to make changes across the entire project without having to manually change in the same way object by object.</p>"},{"location":"Unity/Script/","title":"Script","text":"<p>A script is programmed in C# and it can control the state of the game from the game.</p>"},{"location":"Unity/Setting%20Up%20the%20Enviorment/","title":"Setting Up The Enviorment","text":"<p>Download Unity and install the lts (latest) version of the game engine. make sure to select universal UWP(windows platform) and windows when downloading the version.</p> <p>Follow the tutorial below: XR Step-by-Step 2023! Hololens 2: Setting up your Project in Unity 2022 + MRTK 2.8.3 + Visual Studio 2022 \u2013 Lance Larsen \u2013 Microsoft MVP \u2013 Hololens / VR / AR</p> <p>Then connect to the Hololens 2 remotely by going in the unity project then Mixed Reality &gt; Remoting &gt; Holographic Remoting for Play Mode.</p> <p>Inside the Hololens 2 open the App named \"Holographic Remoting\". Type the ip address seen inside the app into the settings inside \"Holographic Remoting for Play Mode\" in the unity project. Leave the port as is and make sure to press \"enable holographic remoting for play mode\". </p> <p>This should setup the Hololens 2 to be play tested. </p> <p>Application Description</p>"},{"location":"Unity/Enemy%20Component%20Scripts/Random%20Movement/","title":"Random Movement","text":"<p>This script is used to move the enemy around in random directions and change direction when it detects a collision with a wall.</p>"},{"location":"Unity/UI/Create%20Box/","title":"Create Box","text":"<p>This script creates boxes and destroys them once they leave the set boundary.</p> <p>The first import is for the List class and the second import is for the classes and methods used in unity such as Rigidbody and MonoBehaviour. MonoBehaviour contains lifecycle methods such as Update() used in this Script. For more detail look into Unity - Scripting API: MonoBehaviour (unity3d.com). </p> <p>Public variables are declared to take in inputs from the unity scene and assets. A private list contains a list of box objects that were instantiated. </p> <p>The method \"public void MakeBox()\" instantiates and adds the object to the private list. In each Update() cycle the list of boxes are checked if it left the boundary that was set. If it does then it calls the Destory() method and removes the object that left the boundary from the list.</p> <p>The Prefab contains a rigidbody and object manipulator component.</p> <pre><code>using System.Collections.Generic; // Import the System.Collections.Generic namespace for using the List class\nusing UnityEngine; // Import the UnityEngine namespace to access Unity-specific classes and methods\n\npublic class CreateBox : MonoBehaviour {\n\n    // Public variables allow for easy assignment in the Unity Inspector\n    public Rigidbody box; // Reference to the Rigidbody component that will be instantiated as a box. A prefab object was used.\n    public GameObject location; // Reference to the GameObject representing the location where boxes will be instantiated\n    private List&lt;Rigidbody&gt; list = new List&lt;Rigidbody&gt;(); // Private list to keep track of instantiated Rigidbody boxes\n\n    // Method to instantiate a box and add it to the list\n    public void MakeBox()\n    {\n        // Instantiate a new box at the location's position with the object's rotation\n        Rigidbody newBox = Instantiate(box, location.transform.position, transform.rotation);\n        // Add the new box to the list for tracking\n        list.Add(newBox);\n    }\n\n    // Update is called once per frame\n    void Update()\n    {\n        // Use a temporary list to store items to be removed to avoid modifying the list during iteration\n        List&lt;Rigidbody&gt; itemsToRemove = new List&lt;Rigidbody&gt;();\n\n        // Iterate over the list of boxes\n        foreach (var item in list)\n        {\n            // Check if the box's y position is below -10\n            if (item.transform.position.y &lt; -10)\n            {\n                // Mark the box for removal\n                itemsToRemove.Add(item);\n            }\n        }\n\n        // Remove the marked boxes from the list and destroy their game objects\n        foreach (var item in itemsToRemove)\n        {\n            // Destroy the game object associated with the Rigidbody\n            Destroy(item.gameObject);\n            // Remove the Rigidbody from the list\n            list.Remove(item);\n        }\n    }\n}\n\n}\n</code></pre>"},{"location":"Unity/UI/Create%20Grenade/","title":"Create Grenade","text":"<p>Yet developed</p>"},{"location":"Unity/UI/Mesh%20Saver/","title":"Mesh Saver","text":"<p>Yet developed</p>"},{"location":"Unity/UI/Toggle%20Drone/","title":"Toggle Drone","text":""},{"location":"Unity/UI/Toggle%20Drone/#summary","title":"Summary","text":"<ul> <li>Drone Management: The class allows for activating and deactivating drones, which follow the user within certain conditions.</li> <li>Explosion Handling: It includes functionality to handle drone destruction, complete with an explosion effect.</li> <li>Dynamic Interaction: The drones dynamically adjust their positions relative to the user during gameplay.</li> </ul>"},{"location":"Unity/UI/Toggle%20Drone/#toggledrone-class-explanation","title":"<code>ToggleDrone</code> Class Explanation","text":""},{"location":"Unity/UI/Toggle%20Drone/#namespaces","title":"Namespaces","text":"<ul> <li><code>using System;</code>: Provides basic data types and functionalities.</li> <li><code>using System.Collections.Generic;</code>: Provides access to generic collections like <code>List</code>.</li> <li><code>using UnityEngine;</code>: Provides access to Unity-specific classes and methods.</li> </ul>"},{"location":"Unity/UI/Toggle%20Drone/#class-definition","title":"Class Definition","text":"<pre><code>public class ToggleDrone : MonoBehaviour\n</code></pre> <ul> <li><code>public</code>: Makes the class accessible from other scripts and visible in Unity's Inspector.</li> <li><code>class ToggleDrone</code>: Defines a class named <code>ToggleDrone</code>.</li> <li><code>: MonoBehaviour</code>: Inherits from <code>MonoBehaviour</code>, allowing the script to be attached to Unity GameObjects and access Unity lifecycle methods like <code>Start</code> and <code>Update</code>.</li> </ul>"},{"location":"Unity/UI/Toggle%20Drone/#variables","title":"Variables","text":"<ul> <li><code>public GameObject explosion;</code>: Reference to the explosion prefab that will be instantiated when a drone is destroyed.</li> <li><code>public GameObject DronePrefab;</code>: Reference to the drone prefab that will be instantiated in the scene.</li> <li><code>public GameObject user;</code>: Reference to the user (likely the player or a central object) that the drones will follow.</li> <li><code>private List&lt;GameObject&gt; Drones = new List&lt;GameObject&gt;();</code>: A list to keep track of the instantiated drone GameObjects.</li> <li><code>public int numDrone = 10;</code>: Number of drones to spawn when drones are activated.</li> <li><code>Boolean isDrone = false;</code>: A flag to determine whether drones are currently active or not.</li> </ul>"},{"location":"Unity/UI/Toggle%20Drone/#update-method","title":"<code>Update</code> Method","text":"<pre><code>private void Update()\n{\n    if (isDrone)\n    foreach (GameObject drone in Drones)\n    {\n        if (drone != null)\n        {\n            if (Vector3.Distance(drone.transform.position, user.transform.position) &gt; 4 || drone.transform.position.y &lt; -0.2)\n            {\n                drone.transform.position = Vector3.MoveTowards(drone.transform.position, user.transform.position, 0.1f);\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>Purpose: Continuously checks the state of drones and updates their positions to move them towards the user.</li> <li>Drone Movement:<ul> <li>The drones move towards the user's position if they are too far (more than 4 units away) or if they are below a certain Y-axis threshold (<code>y &lt; -0.2</code>).</li> <li>The drones move with a speed of <code>0.1f</code> units per frame.</li> </ul> </li> <li><code>isDrone</code>: Only checks and moves drones if <code>isDrone</code> is <code>true</code>.</li> </ul>"},{"location":"Unity/UI/Toggle%20Drone/#ondrone-method","title":"<code>OnDrone</code> Method","text":"<pre><code>public void OffDrone()\n{\n    foreach (GameObject drone in Drones)\n    { \n        Destroy(drone); \n    }\n    Drones.Clear();\n    isDrone = false;\n}\n</code></pre> <ul> <li>Purpose: Deactivates all active drones and clears the <code>Drones</code> list.</li> <li>Drone Removal:<ul> <li>Iterates through the <code>Drones</code> list, destroying each drone GameObject.</li> <li>Clears the <code>Drones</code> list to remove all references to the destroyed drones.</li> </ul> </li> <li><code>isDrone</code>: Sets the flag to <code>false</code> to indicate that drones are no longer active.</li> </ul>"},{"location":"Unity/UI/Toggle%20Drone/#dronedestroy-method","title":"<code>droneDestroy</code> Method","text":"<pre><code>public void droneDestroy(GameObject drone)\n{\n    Destroy(Instantiate(explosion, drone.transform.position, Quaternion.identity), 2f);\n    drone.transform.position = user.transform.position + user.transform.forward * 0.5f;\n}\n</code></pre> <ul> <li>Purpose: Handles the destruction of a specific drone, including triggering an explosion effect.</li> <li>Explosion Effect:<ul> <li>Instantiates an explosion prefab at the drone's position.</li> <li>The explosion is automatically destroyed after 2 seconds to clean up the scene.</li> </ul> </li> <li>Drone Position Reset:<ul> <li>After triggering the explosion, the drone's position is reset to a point slightly in front of the user (<code>0.5f</code> units in the direction the user is facing).</li> </ul> </li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/","title":"Toggle Enemy","text":""},{"location":"Unity/UI/Toggle%20Enemy/#summary","title":"Summary","text":"<ul> <li>Instantiation and Removal: Handles spawning and removing enemy GameObjects based on various conditions.</li> <li>Spatial Awareness: Uses MRTK\u2019s spatial awareness to place enemies on mesh surfaces.</li> <li>Enemy Management: Manages the lifecycle of enemies, including spawning, tracking, and removal.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#toggleenemy-class-explanation","title":"<code>ToggleEnemy</code> Class Explanation","text":""},{"location":"Unity/UI/Toggle%20Enemy/#namespaces","title":"Namespaces","text":"<ul> <li><code>using Microsoft.MixedReality.Toolkit.SpatialAwareness;</code>: Provides access to spatial awareness features in the Microsoft Mixed Reality Toolkit (MRTK).</li> <li><code>using Microsoft.MixedReality.Toolkit;</code>: Includes core functionalities of MRTK.</li> <li><code>using UnityEngine;</code>: Provides access to Unity-specific classes and methods.</li> <li><code>using System.Linq;</code>: Provides LINQ query capabilities for data manipulation.</li> <li><code>using System.Collections.Generic;</code>: Provides access to generic collections such as <code>List</code>.</li> <li><code>using System;</code>: Provides basic data types and functions.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#class-definition","title":"Class Definition","text":"<pre><code>public class ToggleEnemy : MonoBehaviour\n</code></pre> <ul> <li><code>public</code>: Allows the class to be accessible from other scripts and Unity's Inspector.</li> <li><code>class ToggleEnemy</code>: Defines the class named <code>ToggleEnemy</code>.</li> <li><code>: MonoBehaviour</code>: Inherits from <code>MonoBehaviour</code>, allowing the script to be attached to Unity GameObjects and access Unity lifecycle methods.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#variables","title":"Variables","text":"<ul> <li><code>public GameObject EnemyPrefab;</code>: Prefab for the enemy model that will be instantiated in the scene.</li> <li><code>public Transform Player;</code>: Reference to the player GameObject for orientation and position-related calculations.</li> <li><code>public GameObject NormalIndicator;</code>: Prefab for a normal indicator (not used in the provided code).</li> <li><code>public Transform Parent;</code>: Transform to act as the parent for instantiated enemies.</li> <li><code>public int enemyTotal = 10;</code>: Total number of enemies to spawn.</li> <li><code>private IMixedRealitySpatialAwarenessMeshObserver observer;</code>: Interface for accessing spatial awareness mesh data.</li> <li><code>private int count = 0;</code>: Counter used to control the spawning frequency of enemies.</li> <li><code>private int killCount = 0;</code>: Keeps track of the number of enemies killed.</li> <li><code>public float killYBoundary = -10f;</code>: Y-axis boundary below which enemies are considered \"fallen\" and should be removed.</li> <li><code>private List&lt;GameObject&gt; numberEnemies = new List&lt;GameObject&gt;();</code>: List to keep track of active enemy GameObjects.</li> <li><code>public Boolean enemySpawn = true;</code>: Boolean flag to control whether enemies should be spawned.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#start-method","title":"<code>Start</code> Method","text":"<pre><code>void Start()\n{\n    var spatialAwarenessService = CoreServices.SpatialAwarenessSystem;\n    var dataProviderAccess = spatialAwarenessService as      IMixedRealityDataProviderAccess;\n    observer = dataProviderAccess.GetDataProvider&lt;IMixedRealitySpatialAwarenessMeshObserver&gt;(\"OpenXR Spatial Mesh Observer\");\n    if (observer == null)\n    {\n        Debug.LogError(\"Failed to get the spatial awareness mesh observer!\");\n        return;\n    }\n}\n</code></pre> <ul> <li>Purpose: Initializes the spatial awareness mesh observer.</li> <li>Spatial Awareness Service: Retrieves the spatial awareness system and accesses the mesh observer.</li> <li>Error Handling: Logs an error if the mesh observer cannot be obtained.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#update-method","title":"<code>Update</code> Method","text":"<pre><code>void Update()\n{\n    if (enemySpawn)\n    {\n        if (numberEnemies.Count &lt; enemyTotal &amp;&amp; count == 400)\n        {\n            RandomMeshNormalCheck();\n        }\n        if (count &lt; 400)\n        {\n            count++;\n        }\n        CheckFallenEnemies();\n    }\n    else\n    {\n        foreach (GameObject enemy in numberEnemies)\n        {\n            RemoveEnemy(enemy);\n        }\n    }\n}\n</code></pre> <ul> <li>Purpose: Manages enemy spawning and checks for fallen enemies.</li> <li>Enemy Spawning: Spawns enemies when the count is 400 and fewer enemies than <code>enemyTotal</code> exist.</li> <li>Enemy Removal: Removes all enemies if <code>enemySpawn</code> is <code>false</code>.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#enemyspawnon-method","title":"<code>EnemySpawnOn</code> Method","text":"<pre><code>public void EnemySpawnOn()\n{\n    enemySpawn = true;\n}\n</code></pre> <ul> <li>Purpose: Enables enemy spawning by setting <code>enemySpawn</code> to <code>true</code>.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#enemyspawnoff-method","title":"<code>EnemySpawnOff</code> Method","text":"<pre><code>public void EnemySpawnOn()\n{\n    enemySpawn = true;\n}\n</code></pre> <ul> <li>Purpose: Disables enemy spawning by setting <code>enemySpawn</code> to <code>false</code>.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#randommeshnormalcheck-method","title":"<code>RandomMeshNormalCheck</code> Method","text":"<pre><code>public void RandomMeshNormalCheck()\n{\n    var meshes = observer.Meshes.Values;\n    if (!meshes.Any())\n    {\n        Debug.LogWarning(\"No meshes available from the observer.\");\n        return;\n    }\n\n    int randomMeshIndex = UnityEngine.Random.Range(0, meshes.Count());\n    var randomMeshObject = meshes.ElementAt(randomMeshIndex);\n\n    if (randomMeshObject.Filter == null)\n    {\n        Debug.LogWarning(\"Mesh filter is null for the selected mesh object.\");\n        return;\n    }\n\n    Mesh mesh = randomMeshObject.Filter.sharedMesh;\n    if (mesh == null)\n    {\n        Debug.LogWarning(\"Mesh is null for the selected mesh object.\");\n        return;\n    }\n\n    Vector3[] vertices = mesh.vertices;\n    Vector3[] normals = mesh.normals;\n\n    if (vertices.Length == 0 || normals.Length == 0)\n    {\n        Debug.LogWarning($\"No vertices ({vertices.Length}) or normals ({normals.Length}) available in the selected mesh.\");\n        return;\n    }\n\n    List&lt;int&gt; floor = new List&lt;int&gt;();\n    for (int i = 0; i &lt; normals.Length; i++)\n    {\n        if (normals[i].y &gt; 0.9 &amp;&amp; vertices[i].y &lt; Player.transform.position.y + 0.2)\n        {\n            floor.Add(i);\n        }\n    }\n    if (floor.Count == 0)\n    {\n        Debug.LogWarning(\"No floor normals found in the selected mesh.\");\n        return;\n    }\n\n    int randomIndex = floor[UnityEngine.Random.Range(0, floor.Count)];\n    Vector3 randomPosition = vertices[randomIndex];\n\n    Vector3 worldPosition = randomMeshObject.Filter.transform.TransformPoint(randomPosition);\n    Vector3 offSetWorldPosition = new Vector3(worldPosition.x, worldPosition.y + 0.5f, worldPosition.z);\n    GameObject enemyInstance = Instantiate(EnemyPrefab, offSetWorldPosition, transform.rotation, Parent);\n    numberEnemies.Add(enemyInstance);\n}\n</code></pre> <ul> <li>Purpose: Spawns enemies at random positions on the floor of randomly selected meshes.</li> <li>Mesh Selection: Chooses a random mesh from available meshes.</li> <li>Position Calculation: Finds valid floor positions based on mesh normals and vertices.</li> <li>Instantiation: Creates and positions the enemy GameObject in the scene.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#removeenemy-method","title":"<code>RemoveEnemy</code> Method","text":"<pre><code>public void RemoveEnemy(GameObject enemy)\n{\n    numberEnemies.Remove(enemy);\n    Destroy(enemy);\n}\n</code></pre> <ul> <li>Purpose: Removes an enemy from the list and destroys the GameObject.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#enterragdollstate-method","title":"<code>EnterRagdollState</code> Method","text":"<pre><code>public void EnterRagdollState(GameObject enemy)\n{\n    Animator animator = enemy.GetComponent&lt;Animator&gt;();\n    StarterAssets.RandomMovement randomMovement = enemy.GetComponent&lt;StarterAssets.RandomMovement&gt;();\n\n    animator.enabled = false;\n    randomMovement.enabled = false;\n    StartCoroutine(DestroyAfterDelay(enemy, 5f));\n}\n</code></pre> <ul> <li>Purpose: Switches an enemy to a ragdoll state by disabling its <code>Animator</code> and movement scripts, then schedules destruction.</li> <li>Ragdoll Effect: Disables components to simulate ragdoll physics.</li> <li>Destruction: Calls <code>DestroyAfterDelay</code> coroutine to remove the enemy after a delay.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#destroyafterdelay-method","title":"<code>DestroyAfterDelay</code> Method","text":"<pre><code>private System.Collections.IEnumerator DestroyAfterDelay(GameObject enemy, float delay)\n{\n    yield return new WaitForSeconds(delay);\n    RemoveEnemy(enemy);\n}\n</code></pre> <ul> <li>Purpose: Coroutine to wait for a specified delay before removing the enemy from the scene.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#enemykilled-method","title":"<code>EnemyKilled</code> Method","text":"<pre><code>public void EnemyKilled()\n{\n    killCount++;\n}\n</code></pre> <ul> <li>Purpose: Increments the kill count when an enemy is killed.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#getkillcount-property","title":"<code>getKillCount</code> Property","text":"<pre><code>public int getKillCount\n{\n    get { return killCount; }\n}\n</code></pre> <ul> <li>Purpose: Provides read-only access to the current kill count.</li> </ul>"},{"location":"Unity/UI/Toggle%20Enemy/#checkfallenenemies-method","title":"<code>CheckFallenEnemies</code> Method","text":"<pre><code>private void CheckFallenEnemies()\n{\n    for (int i = numberEnemies.Count - 1; i &gt;= 0; i--)\n    {\n        if (numberEnemies[i].transform.position.y &lt; killYBoundary)\n        {\n            RemoveEnemy(numberEnemies[i]);\n        }\n    }\n}\n</code></pre> <ul> <li>Purpose: Checks if any enemies have fallen below a certain Y-axis boundary and removes them if necessary.</li> </ul> <p>This script is contained in an empty object in the scene, more about it in Application Description.</p>"},{"location":"Unity/UI/Toggle%20Mesh/","title":"Toggle Mesh","text":"<p>This turns on and off the mesh.</p> <p>This script is contained in an empty object in the scene, more about it in Application Description.</p>"},{"location":"Unity/UI/Toggle%20Pistol/","title":"Toggle Pistol","text":"<p>This turns on and off the pistol.</p> <p>This script is contained in an empty object in the scene, more about it in Application Description.</p>"}]}